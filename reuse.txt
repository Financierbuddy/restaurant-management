export const en = {
	common: {
		submit: 'Submit',
		Congratulation: 'Congratulation',
		'Your booking': 'Your booking',
		Continue: 'Continue',
		'Start your search': 'Start your search',
		'Show me more': 'Show me more',
		'View all': 'View all',
		night: 'night',
		'Enter your email': 'Enter your email',
		'Become a host': 'Become a host',
		'Become an author': 'Become an author',
		Clear: 'Clear',
		Apply: 'Apply',
		'Min price': 'Min price',
		'Max price': 'Max price',
		Filters: 'Filters',
		'Show map': 'Show map',
		'On sale': 'On sale',
		'Hosted by': 'Hosted by',
		person: 'person',
		day: 'day',
		'Car owner': 'Car owner',
		'Show all photos': 'Show all photos',
		'See host profile': 'See host profile',
		Reserve: 'Reserve',
		'Clear dates': 'Clear dates',
		Save: 'Save',
		'Select Date': 'Select Date',
		Date: 'Date',
		Reviews: 'Reviews',
	},
	Header: {
		'List your property': 'List your property',
		'Sign up': 'Sign up',
		AvatarDropDown: {
			'My Account': 'My Account',
			'My bookings': 'My bookings',
			Wishlist: 'Wishlist',
			Help: 'Helps',
			'Dark theme': 'Dark theme',
			Logout: 'Logout',
		},
		Notifications: {
			Notifications: 'Notifications',
		},
		DropdownTravelers: {
			Travelers: 'Travelers',
			Stays: 'Stays',
			'Real Estate': 'Real Estate',
			Cars: 'Cars',
			Experiences: 'Experiences',
			stayDescription: 'Find the perfect place to stay',
			estateDescription: 'Find the perfect place to buy or rent',
			carDescription: 'Find the perfect car to rent',
			experienceDescription: 'Find the perfect experience',
			footerDoc: 'Documentation',
			footerDescription: 'Learn more about how to list your property!',
		},
	},
	HeroSearchForm: {
		Location: 'Location',
		Locations: 'Locations',
		CheckIn: 'Check In',
		CheckOut: 'Check Out',
		'Add guests': 'Add guests',
		'Ages 13 or above': 'Ages 13 or above',
		Adults: 'Adults',
		Children: 'Children',
		Infants: 'Infants',
		'Ages 2â€“12': 'Ages 2â€“12',
		'Ages 0â€“2': 'Ages 0â€“2',
		'Same drop off': 'Same drop off',
		'Different drop off': 'Different drop off',
		'City or Airport': 'City or Airport',
		'Pick up location': 'Pick up location',
		'Drop off location': 'Drop off location',
		'Pick up - Drop off': 'Pick up - Drop off',
		Guests: 'Guests',
		'Round-trip': 'Round-trip',
		'One-way': 'One-way',
		'Flying from': 'Flying from',
		'Where do you want to fly from?': 'Where do you want to fly from?',
		'Flying to': 'Flying to',
		'Where you want to fly to?': 'Where you want to fly to?',
		'Pick up date': 'Pick up date',
		'Recent searches': 'Recent searches',
		'Where are you going?': 'Where are you going?',
		'Add dates': 'Add dates',
		Date: 'Date',
		search: 'Search',
		'Property type': 'Property type',
		Type: 'Type',
		'Choose price range': 'Choose price range',
		'Price range': 'Price range',
		'Min price': 'Min price',
		'Max price': 'Max price',
		'Where to?': 'Where to?',
		'Anywhere â€¢ Any week â€¢ Add guests': 'Anywhere â€¢ Any week â€¢ Add guests',
		'Clear all': 'Clear all',
		Where: 'Where',
		When: 'When',
		"When's your trip?": "When's your trip?",
		Destinations: 'Destinations',
		'Search destinations': 'Search destinations',
		'Popular destinations': 'Popular destinations',
		Who: 'Who',
		"Who's coming?": "Who's coming?",
		'Pick up': 'Pick up',
		'Drop off': 'Drop off',
		'Flight type?': 'Flight type?',
		'Ticket Class': 'Ticket Class',
		'Where to find?': 'Where to find?',
		Property: 'Property',
		'Add property': 'Add property',
		Price: 'Price',
	},
	MobileMenuBar: {
		siteDescription:
			'Discover the most outstanding articles on all topics of life. Write your stories and share them',
	},
	addListings: {
		'Add new listing': 'Add new listing',
		'Add new car': 'Add new car',
		'Add new experience': 'Add new experience',
		'Add new stay': 'Add new stay',
		'Add new real estate': 'Add new real estate',
		totalStep: '10',
		pagination: {
			'Go back': 'Go back',
			'Publish listing': 'Publish listing',
			Continue: 'Continue',
		},
		page1: {
			pageTitle: 'Choosing listing categories',
			'Choose a property type': 'Choose a property type',
			propertyTypeDescription:
				'Professional hospitality businesses that usually have a unique style or theme defining their brand and decor',
			'Place name': 'Place name',
			placeNameDescription:
				'A catchy name usually includes: House name + Room name + Featured property + Tourist destination',
			'Rental form': 'Rental form',
			rentalFormDescription:
				"Guests have the whole place to themselvesâ€”there's a private entrance and no shared spaces. A bedroom, bathroom, and kitchen are usually included.",
		},
		page2: {
			pageTitle: 'Your place location',
			'Use current location': 'Use current location',
			'Country/Region': 'Country/Region',
			Street: 'Street',
			'Room number (optional)': 'Room number (optional)',
			City: 'City',
			State: 'State',
			'Postal code': 'Postal code',
			'Detailed address': 'Detailed address',
		},
		page3: {
			pageTitle: 'Size of your location',
			'Acreage (m2)': 'Acreage (m2)',
			Guests: 'Guests',
			Bedroom: 'Bedroom',
			Beds: 'Beds',
			Bathroom: 'Bathroom',
			Kitchen: 'Kitchen',
		},
		page4: {
			pageTitle: 'Amenities',
			pageDescription:
				'Many customers have searched for accommodation based on amenities criteria',
			'General amenities': 'General amenities',
			'Other amenities': 'Other amenities',
			'Safe amenities': 'Safe amenities',
		},
		page5: {
			pageTitle: 'Set house rules for your guests',
			pageDescription:
				'Guests must agree to your house rules before they book.',
			'General amenities': 'General amenities',
			Pet: 'Pet',
			'Party organizing': 'Party organizing',
			Cooking: 'Cooking',
			'Additional rules': 'Additional rules',
			'No smoking': 'No smoking',
			'Add tag': 'Add tag',
		},
		page6: {
			pageTitle: 'Your place description for client',
			pageDescription:
				'Mention the best features of your accommodation, any special amenities like fast Wi-Fi or parking, as well as things you like about the neighborhood.',
		},
		page7: {
			pageTitle: 'Pictures of the place',
			pageDescription:
				'A few beautiful photos will help customers have more sympathy for your property.',
			'Cover image': 'Cover image',
			'Pictures of the place': 'Pictures of the place',
			'Upload a file': 'Upload a file',
			'or drag and drop': 'or drag and drop',
			'PNG, JPG, GIF up to 10MB': 'PNG, JPG, GIF up to 10MB',
		},
		page8: {
			pageTitle: 'Price your space',
			pageDescription:
				"The host's revenue is directly dependent on the setting of rates and regulations on the number of guests, the number of nights, and the cancellation policy.",
			Currency: 'Currency',
			'Base price (Monday -Thuday)': 'Base price (Monday -Thuday)',
			'Base price (Friday-Sunday)': 'Base price (Friday-Sunday)',
			'Long term price (Monthly discount)':
				'Long term price (Monthly discount)',
		},
		page9: {
			pageTitle: 'How long can guests stay?',
			pageDescription:
				"Shorter trips can mean more reservations, but you'll turn over your space more often.",
			availability: 'Set your availability',
			availabilityDescription:
				'Editing your calendar is easyâ€”just select a date to block or unblock it. You can always make changes after you publish.',
		},
		page10: {
			pageTitle: 'Congratulations ðŸŽ‰',
			pageDescription:
				'Excellent, congratulations on completing the listing, it is waiting to be reviewed for publication',
			'This is your listing': 'This is your listing',
			Edit: 'Edit',
			Preview: 'Preview',
		},
	},
	homePage: {
		sectionHero: {
			title: 'Hotel, car & experiences',
			description:
				'Accompanying us, you have a trip full of experiences. With Chisfis, booking accommodation, resort villas, hotels',
			'Start your search': 'Start your search',
			button: 'Start your search',
		},
	},
	accountPage: {
		'Account information': 'Account information',
		'Edit profile': 'Edit profile',
		'Change password': 'Change password',
		'Log out': 'Log out',
		'Name on account': 'Name on account',
		'Change Image': 'Change Image',
		Name: 'Name',
		Gender: 'Gender',
		Male: 'Male',
		Female: 'Female',
		Other: 'Other',
		Username: 'Username',
		Password: 'Password',
		Email: 'Email',
		'Date of birth': 'Date of birth',
		Addess: 'Addess',
		'Phone number': 'Phone number',
		'About you': 'About you',
		'Update information': 'Update information',
		'Save lists': 'Save lists',
		'Saved listings': 'Saved listings',
		'Payments & payouts': 'Payments & payouts',
		'Payout methods': 'Payout methods',
		'Add payout method': 'Add payout method',
		'Update your password': 'Update your password',
		'Current password': 'Current password',
		'New password': 'New password',
		'Confirm password': 'Confirm password',
		'Update password': 'Update password',
	},
	login: {
		Login: 'Login',
		'Email address': 'Email address',
		Password: 'Password',
		'Forgot password?': 'Forgot password?',
		'New user?': 'New user?',
		'Create an account': 'Create an account',
		Signup: 'Signup',
		'Already have an account?': 'Already have an account?',
		'Sign in': 'Sign in',
	},
	subscriptionPage: {
		Subscription: 'Subscription',
		popular: 'POPULAR',
	},
}


// ChatInput.tsx
import React, { useState, useRef, useEffect } from 'react';
import { ChatInputProps } from './types';
import EmojiPicker, { EmojiClickData, Theme } from 'emoji-picker-react';

const ChatInput: React.FC<ChatInputProps> = ({
  onSendMessage,
  onSendFile,
  onSendVoice
}) => {
  const [message, setMessage] = useState<string>('');
  const [isRecording, setIsRecording] = useState<boolean>(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState<boolean>(false);
  const [showAttachments, setShowAttachments] = useState<boolean>(false);
  
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const imageInputRef = useRef<HTMLInputElement>(null);
  const videoInputRef = useRef<HTMLInputElement>(null);
  const documentInputRef = useRef<HTMLInputElement>(null);
  const emojiPickerRef = useRef<HTMLDivElement>(null);
  const attachmentsRef = useRef<HTMLDivElement>(null);

  // Auto-grow textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 120)}px`;
    }
  }, [message]);

  // Close emoji picker and attachments dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target as Node)) {
        setShowEmojiPicker(false);
      }
      if (attachmentsRef.current && !attachmentsRef.current.contains(event.target as Node)) {
        setShowAttachments(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleSendMessage = () => {
    if (message.trim() === '') return;
    onSendMessage(message);
    setMessage('');
    
    // Reset textarea height
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleEmojiClick = (emojiData: EmojiClickData) => {
    setMessage(prev => prev + emojiData.emoji);
    setShowEmojiPicker(false);
  };

  const handleFileUpload = (inputRef: React.RefObject<HTMLInputElement>) => {
    inputRef.current?.click();
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, fileType: string) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      onSendFile(files[0]);
      console.log(`Uploading ${fileType} file:`, files[0].name);
      // Reset the input to allow selecting the same file again
      if (e.target) {
        e.target.value = '';
      }
    }
    setShowAttachments(false);
  };

  const handleVoiceRecord = () => {
    setIsRecording(!isRecording);
    onSendVoice();
    setShowAttachments(false);
  };

  return (
    <div className="border-t px-5 py-3 flex items-end bg-white">
          {/* Attachments dropdown */}
      <div className="relative mr-3" ref={attachmentsRef}>
        <button 
          className="p-2 rounded-full border bg-blue-500 text-white hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
          onClick={() => setShowAttachments(!showAttachments)}
          aria-label="Add attachments"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
        </button>
        
        {showAttachments && (
          <div className="absolute bottom-full left-0 mb-2 bg-white rounded-lg shadow-lg p-2 flex flex-col space-y-2 z-10">
            <button 
              onClick={() => handleFileUpload(documentInputRef)}
              className="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-md"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span className="text-sm">Document</span>
            </button>
            
            <button 
              onClick={() => handleFileUpload(imageInputRef)}
              className="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-md"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span className="text-sm">Image</span>
            </button>
            
            <button 
              onClick={() => handleFileUpload(videoInputRef)}
              className="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-md"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              <span className="text-sm">Video</span>
            </button>
            
            <button 
              onClick={handleVoiceRecord}
              className="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded-md"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
              <span className="text-sm">Voice</span>
            </button>
          </div>
        )}
      </div>
      
      {/* Hidden file inputs */}
      <input
        type="file"
        ref={documentInputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, 'document')}
        accept=".pdf,.doc,.docx,.txt,.xls,.xlsx"
      />
      <input
        type="file"
        ref={imageInputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, 'image')}
        accept="image/*"
      />
      <input
        type="file"
        ref={videoInputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, 'video')}
        accept="video/*"
      />
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, 'file')}
        accept="*/*"
      />
      
      <div className="flex-1 bg-white overflow-hidden">
        <textarea
          ref={textareaRef}
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="Type a message here"
          className="w-full p-2 border-none border-transparent outline-none focus:outline-none resize-none min-h-[40px] max-h-[120px]"
          rows={1}
        />
      </div>
      
      <div className="flex ml-3 space-x-2">
        {/* Emoji picker */}
        <div className="relative" ref={emojiPickerRef}>
          <button 
            className="p-2 rounded-full text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
            onClick={() => setShowEmojiPicker(!showEmojiPicker)}
            aria-label="Add emoji"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </button>
          
          {showEmojiPicker && (
            <div className="absolute bottom-full right-0 mb-2 z-10">
              <EmojiPicker 
                onEmojiClick={handleEmojiClick} 
                theme={Theme.LIGHT}
                width={320}
                height={400}
                lazyLoadEmojis={true}
              />
            </div>
          )}
        </div>
        
        <button 
          onClick={handleSendMessage}
          disabled={message.trim() === ''}
          className={`p-2 rounded-full ${
            message.trim() === '' 
              ? 'bg-blue-300 cursor-not-allowed' 
              : 'bg-blue-500 hover:bg-blue-600'
          } text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50`}
          aria-label="Send message"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 transform rotate-0 translate-x-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default ChatInput;
